These are the steps to create Custom user model in Djnago

reference custom user model
(AbstractBaseUser)

https://docs.djangoproject.com/en/4.2/topics/auth/customizing/



required Libraries in global enviroment 


Windows 
>>> pip install django 
>>> pip install virtualenv 


Linux 
>>> sudo apt install python3-pip 
>>> pip install django
>>> sudo pip install virtualenv


---------------------------------------------------------------------------------------
Step 1 

Create Django project 

>>> django-admin startproject websiteBackend

>>> cd websiteBackend

---------------------------------------------------------------------------------------
Step 2 

create virtual enviroment and install Libraries 

windows
>>> virtualenv env 

activate enviroment
>>>env\Scripts\activate


Linux
>>> virtualenv env

activate enviroment 
>>>source env/bin/activate



>>> pip install django
>>> pip install djangorestframework
>>> python -m pip install Pillow

---------------------------------------------------------------------------------------
Step 3

Create django app

>>> python manage.py startapp Accounts

---------------------------------------------------------------------------------------
Step 4

Open Vs code 

>>> code .


---------------------------------------------------------------------------------------
Step 5

install rest_framework and application in settings.py 


open 

settings.py 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'Accounts',
]


---------------------------------------------------------------------------------------

Step 6

setup media directory and static directory 

=> open settings.py  

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


=> and open urls.py ( project )

from django.contrib import admin
from django.urls import path
from django.conf import settings                # import for setup media and static
from django.conf.urls.static import static      # import for setup media and static

urlpatterns = [
    path('admin/', admin.site.urls),
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL , document_root = settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL , document_root = settings.MEDIA_ROOT)

---------------------------------------------------------------------------------------

Step 7

create custom user model and UserManager
add fields according to your requirements 

models.py ( Accounts App )

from django.db import models
from django.contrib.auth.models import BaseUserManager, AbstractBaseUser


class UserManager(BaseUserManager):
    def create_user(self, email, name, designation, user_roll, user_profile=None, password=None):
        if not email:
            raise ValueError("Users must have an email address")

        user = self.model(
            email=self.normalize_email(email),
            name=name,
            designation=designation,
            user_roll=user_roll,
            user_profile=user_profile
        )

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, name, designation, user_roll, password=None):
        user = self.create_user(
            email,
            password=password,
            name=name,
            designation=designation,
            user_roll=user_roll,
        )
        user.is_admin = True
        user.save(using=self._db)
        return user
   

    


# First create Our custom user model .
class User(AbstractBaseUser):
    email = models.EmailField(
        verbose_name="Email Address",
        max_length=255,
        unique=True,
    )
    
    name = models.CharField(max_length=255)
    designation = models.CharField(max_length=255)
    user_roll = models.CharField(max_length=255)
    user_profile = models.ImageField(upload_to='user_profile/', null=True, blank=True)
    # Add or modify fields as per your requirements

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=True)
    is_admin = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # Your UserManager definition
    objects = UserManager()
    
    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["name", "designation", "user_roll"]

    def __str__(self):
        return self.email

    def has_perm(self, perm, obj=None):
        return self.is_admin

    def has_module_perms(self, app_label):
        return True

    @property
    def is_staff(self):
        return self.is_admin





---------------------------------------------------------------------------------------

Step 8 

Setup 
admin.py ( Accounts App )

from django.contrib import admin
from . models import User
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin

# Register your models here.
class UserModelAdmin(BaseUserAdmin):

    # The fields to be used in displaying the User model.
    # These override the definitions on the base UserModelAdmin
    # that reference specific fields on auth.User.

    list_display = ["id" , "email", "name", "is_admin" ,"user_profile" , "created_at" , "updated_at"]
    list_filter = ["is_admin"]
    fieldsets = [
        ('User Credentials', {"fields": ["email", "password"]}),
        ("Personal info", {"fields": ["name" , "designation" ,"user_profile"]}),
        ("Permissions", {"fields": ["is_admin"]}),
    ]
    # add_fieldsets is not a standard ModelAdmin attribute. UserModelAdmin
    # overrides get_fieldsets to use this attribute when creating a user.
    add_fieldsets = [
        (
            None,
            {
                "classes": ["wide"],
                "fields": ["email", "name" , "designation", "password"],
            },
        ),
    ]
    search_fields = ["email" , "name"]
    ordering = ["email" , "id"]
    filter_horizontal = []

# Now register the new UserAdmin...
admin.site.register(User, UserModelAdmin)



---------------------------------------------------------------------------------------

Step 9 

register custom user model in a settings.py 
and add this line below databse settings

open settings.py 

AUTH_USER_MODEL = "Accounts.User"



---------------------------------------------------------------------------------------

Step 10 

open terminal and enter these commands 

>>> python manage.py makemigrations
>>> python manage.py migrate
>>> python manage.py createsuperuser


---------------------------------------------------------------------------------------

Step 11 

goto 

http://127.0.0.1:8000/admin


login and custom user Model complete 

---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------








































